// Afribit Africa - Prisma Schema
// Database: MySQL (Bluehost)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model for admin access
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  passwordHash  String
  role          UserRole  @default(VIEWER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("users")
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

// Contact form submissions
model ContactSubmission {
  id          String   @id @default(uuid())
  name        String
  email       String
  phone       String?
  subject     String?
  message     String   @db.Text
  status      SubmissionStatus @default(PENDING)
  ipAddress   String?
  userAgent   String?  @db.Text
  createdAt   DateTime @default(now())
  respondedAt DateTime?
  
  @@map("contact_submissions")
  @@index([email])
  @@index([status])
  @@index([createdAt])
}

enum SubmissionStatus {
  PENDING
  REVIEWED
  RESPONDED
  SPAM
}

// Newsletter subscribers
model Subscriber {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  status    SubscriberStatus @default(ACTIVE)
  source    String?  // Where they subscribed from
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("subscribers")
  @@index([status])
}

enum SubscriberStatus {
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
}

// Blog posts / News articles
model Post {
  id          String      @id @default(uuid())
  title       String
  slug        String      @unique
  excerpt     String?     @db.Text
  content     String      @db.LongText
  coverImage  String?
  author      String
  category    PostCategory
  tags        String?     // JSON array of tags
  status      PostStatus  @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("posts")
  @@index([slug])
  @@index([status])
  @@index([category])
  @@index([publishedAt])
}

enum PostCategory {
  NEWS
  EDUCATION
  COMMUNITY
  EVENTS
  UPDATES
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Donation records (synced with BTCPay)
model Donation {
  id              String   @id @default(uuid())
  btcpayInvoiceId String?  @unique
  amount          Decimal  @db.Decimal(19, 8)
  currency        String   @default("USD")
  btcAmount       Decimal? @db.Decimal(19, 8)
  status          DonationStatus @default(PENDING)
  donorEmail      String?
  donorName       String?
  message         String?  @db.Text
  isAnonymous     Boolean  @default(false)
  program         String?  // Which program they're supporting
  createdAt       DateTime @default(now())
  completedAt     DateTime?
  
  @@map("donations")
  @@index([status])
  @@index([createdAt])
  @@index([program])
}

enum DonationStatus {
  PENDING
  PROCESSING
  COMPLETED
  EXPIRED
  FAILED
}

// Program/Initiative tracking
model Program {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String   @db.Text
  coverImage  String?
  goal        Decimal? @db.Decimal(19, 2)
  raised      Decimal  @default(0) @db.Decimal(19, 2)
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("programs")
  @@index([slug])
  @@index([isActive])
}

// Testimonials / Success stories
model Testimonial {
  id        String   @id @default(uuid())
  name      String
  role      String?  // e.g., "Merchant", "Community Member"
  location  String?
  quote     String   @db.Text
  image     String?
  videoUrl  String?
  program   String?  // Which program they're associated with
  isActive  Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("testimonials")
  @@index([isActive])
}

// Statistics tracking
model Statistic {
  id        String   @id @default(uuid())
  key       String   @unique // e.g., "total_transactions", "merchants_onboarded"
  value     String   // Flexible: can be number, JSON, etc.
  label     String   // Display label
  icon      String?  // Icon identifier
  order     Int      @default(0)
  updatedAt DateTime @updatedAt
  
  @@map("statistics")
}

// Page views / Analytics (optional, for basic tracking)
model PageView {
  id        String   @id @default(uuid())
  path      String
  userAgent String?  @db.Text
  ipAddress String?
  referrer  String?  @db.Text
  createdAt DateTime @default(now())
  
  @@map("page_views")
  @@index([path])
  @@index([createdAt])
}
